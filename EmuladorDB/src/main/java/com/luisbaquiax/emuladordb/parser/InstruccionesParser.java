
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 06 03:56:56 CST 2024
//----------------------------------------------------

package com.luisbaquiax.emuladordb.parser;

import com.luisbaquiax.emuladordb.lexer.InstrucionesLexer;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 06 03:56:56 CST 2024
  */
public class InstruccionesParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public InstruccionesParser() {super();}

  /** Constructor which sets the default scanner. */
  public InstruccionesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public InstruccionesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\003\004" +
    "\000\002\021\006\000\002\021\006\000\002\004\014\000" +
    "\002\004\011\000\002\005\010\000\002\025\006\000\002" +
    "\026\004\000\002\026\002\000\002\006\006\000\002\007" +
    "\004\000\002\012\004\000\002\012\002\000\002\010\004" +
    "\000\002\013\004\000\002\013\002\000\002\011\007\000" +
    "\002\011\007\000\002\011\002\000\002\014\003\000\002" +
    "\014\003\000\002\017\007\000\002\017\007\000\002\020" +
    "\007\000\002\020\007\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\022\004\000\002\024\004\000\002" +
    "\024\002\000\002\023\003\000\002\023\003\000\002\015" +
    "\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\012\004\011\005\006\006\005\007\004\001" +
    "\002\000\004\011\132\001\002\000\004\011\127\001\002" +
    "\000\004\011\104\001\002\000\004\031\103\001\002\000" +
    "\004\002\102\001\002\000\006\015\020\034\021\001\002" +
    "\000\004\031\017\001\002\000\004\031\016\001\002\000" +
    "\004\031\015\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002\000\010\011" +
    "\ufff0\033\077\036\ufff0\001\002\000\004\011\074\001\002" +
    "\000\004\011\024\001\002\000\004\031\ufffc\001\002\000" +
    "\004\015\025\001\002\000\016\010\uffed\017\uffed\020\uffed" +
    "\031\uffed\032\071\035\uffed\001\002\000\006\010\027\031" +
    "\uffea\001\002\000\004\015\031\001\002\000\004\031\ufffb" +
    "\001\002\000\016\023\034\024\036\025\040\026\037\027" +
    "\035\030\032\001\002\000\006\021\uffdf\022\uffdf\001\002" +
    "\000\006\021\056\022\055\001\002\000\010\014\041\021" +
    "\uffde\022\uffde\001\002\000\006\021\uffe2\022\uffe2\001\002" +
    "\000\006\021\uffe1\022\uffe1\001\002\000\006\021\uffe0\022" +
    "\uffe0\001\002\000\006\021\uffe3\022\uffe3\001\002\000\006" +
    "\012\043\013\046\001\002\000\004\031\uffec\001\002\000" +
    "\004\015\060\001\002\000\004\031\uffe9\001\002\000\004" +
    "\031\uffe8\001\002\000\004\015\047\001\002\000\016\023" +
    "\051\024\036\025\040\026\037\027\035\030\032\001\002" +
    "\000\006\021\056\022\055\001\002\000\010\014\052\021" +
    "\uffde\022\uffde\001\002\000\004\013\046\001\002\000\004" +
    "\031\uffe5\001\002\000\004\013\046\001\002\000\016\010" +
    "\uffd7\012\uffd7\013\uffd7\031\uffd7\033\uffd7\036\uffd7\001\002" +
    "\000\016\010\uffd8\012\uffd8\013\uffd8\031\uffd8\033\uffd8\036" +
    "\uffd8\001\002\000\004\031\uffe4\001\002\000\016\023\062" +
    "\024\036\025\040\026\037\027\035\030\032\001\002\000" +
    "\006\021\056\022\055\001\002\000\010\014\063\021\uffde" +
    "\022\uffde\001\002\000\004\012\043\001\002\000\004\031" +
    "\uffe7\001\002\000\004\012\043\001\002\000\004\031\uffe6" +
    "\001\002\000\006\012\043\013\046\001\002\000\004\031" +
    "\uffeb\001\002\000\004\015\025\001\002\000\014\010\uffef" +
    "\017\uffef\020\uffef\031\uffef\035\uffef\001\002\000\014\010" +
    "\uffee\017\uffee\020\uffee\031\uffee\035\uffee\001\002\000\004" +
    "\015\025\001\002\000\006\010\027\031\uffea\001\002\000" +
    "\004\031\ufffa\001\002\000\004\015\020\001\002\000\006" +
    "\011\ufff2\036\ufff2\001\002\000\006\011\ufff1\036\ufff1\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "\000\004\015\025\001\002\000\006\017\107\035\106\001" +
    "\002\000\004\015\020\001\002\000\004\035\110\001\002" +
    "\000\010\014\114\021\056\022\055\001\002\000\012\010" +
    "\uffd9\031\uffd9\033\uffd9\036\uffd9\001\002\000\004\036\120" +
    "\001\002\000\006\033\115\036\uffdb\001\002\000\012\010" +
    "\uffda\031\uffda\033\uffda\036\uffda\001\002\000\010\014\114" +
    "\021\056\022\055\001\002\000\004\036\uffdd\001\002\000" +
    "\004\036\uffdc\001\002\000\004\031\ufff8\001\002\000\004" +
    "\036\122\001\002\000\004\017\123\001\002\000\004\035" +
    "\124\001\002\000\010\014\114\021\056\022\055\001\002" +
    "\000\004\036\126\001\002\000\004\031\ufff9\001\002\000" +
    "\004\015\025\001\002\000\006\010\027\031\uffea\001\002" +
    "\000\004\031\ufff3\001\002\000\004\015\025\001\002\000" +
    "\004\020\134\001\002\000\004\015\135\001\002\000\004" +
    "\023\140\001\002\000\006\010\027\031\uffea\001\002\000" +
    "\004\031\ufff7\001\002\000\010\014\114\021\056\022\055" +
    "\001\002\000\010\010\ufff4\031\ufff4\033\142\001\002\000" +
    "\004\015\135\001\002\000\006\010\ufff6\031\ufff6\001\002" +
    "\000\006\010\ufff5\031\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\014\002\007\003\011\004\012\005\006\006" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\021\021\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\025\001" +
    "\001\000\004\013\071\001\001\000\004\011\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\032\001" +
    "\001\000\002\001\001\000\004\015\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\041\017\043\020\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\047" +
    "\001\001\000\004\015\053\001\001\000\002\001\001\000" +
    "\004\020\052\001\001\000\002\001\001\000\004\020\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\060\001\001\000\004\015\064\001\001" +
    "\000\002\001\001\000\004\017\063\001\001\000\002\001" +
    "\001\000\004\017\065\001\001\000\002\001\001\000\010" +
    "\014\067\017\043\020\044\001\001\000\002\001\001\000" +
    "\004\010\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\074\001\001\000\004\011\075\001\001\000" +
    "\002\001\001\000\004\007\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\104\001\001\000\002\001\001\000\004\007\120" +
    "\001\001\000\002\001\001\000\010\015\110\022\111\023" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\115\001\001\000\002\001\001\000\010\015\110\022" +
    "\116\023\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\110\022\124\023\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\127\001" +
    "\001\000\004\011\130\001\001\000\002\001\001\000\004" +
    "\010\132\001\001\000\002\001\001\000\004\025\135\001" +
    "\001\000\002\001\001\000\004\011\136\001\001\000\002" +
    "\001\001\000\006\015\110\023\140\001\001\000\004\026" +
    "\142\001\001\000\004\025\143\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$InstruccionesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$InstruccionesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$InstruccionesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    // Connect this parser to a scanner!
    public InstruccionesParser(InstrucionesLexer lex) {
	    super(lex);
	  }
private Symbol s;
public void syntax_error(Symbol cur_token) {
            this.s = cur_token;
            String cadena = cur_token.value.toString();
            int linea = cur_token.left;
            int col = cur_token.right;
            System.out.print("Error aca > value " + cadena);
            System.out.print(" Linea " + linea);
            System.out.println(" Columna " + col);
            if (expected_token_ids().isEmpty()) {
                System.out.println("ya no se esperaba ningun simbolo");
            }
        }
public Symbol getSim(){
    return this.s;
}

public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$InstruccionesParser$actions {
  private final InstruccionesParser parser;

  /** Constructor */
  CUP$InstruccionesParser$actions(InstruccionesParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$InstruccionesParser$do_action(
    int                        CUP$InstruccionesParser$act_num,
    java_cup.runtime.lr_parser CUP$InstruccionesParser$parser,
    java.util.Stack            CUP$InstruccionesParser$stack,
    int                        CUP$InstruccionesParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$InstruccionesParser$result;

      /* select the action based on the action number */
      switch (CUP$InstruccionesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // numero ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valores ::= numero 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("valores",17, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valores ::= CADENA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("valores",17, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // end_lista_valores ::= 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("end_lista_valores",18, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // end_lista_valores ::= COMA lista_valores 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("end_lista_valores",18, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_valores ::= valores end_lista_valores 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("lista_valores",16, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // signos ::= SIG_IGUAL 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // signos ::= SIG_DIFERENTE 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // signos ::= SIG_MENOR_QUE 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // signos ::= SIG_MENOR 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // signos ::= SIG_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // signos ::= SIG_MAYOR 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // or ::= OR ID signos numero or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("or",14, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // or ::= OR ID SIG_IGUAL CADENA or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("or",14, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // and ::= AND ID signos numero and 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("and",13, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // and ::= AND ID SIG_IGUAL CADENA and 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("and",13, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // and_or ::= or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("and_or",10, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // and_or ::= and 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("and_or",10, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condiciones ::= 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condiciones ::= FILTRAR ID signos numero and_or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condiciones ::= FILTRAR ID SIG_IGUAL CADENA and_or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // next_file ::= 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("next_file",9, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // next_file ::= PUNTO ruta_archivo 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("next_file",9, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ruta_archivo ::= ID next_file 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("ruta_archivo",6, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value_list ::= 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("value_list",8, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value_list ::= COMA lista_columnas 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("value_list",8, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_columnas ::= ID value_list 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("lista_columnas",5, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // delete ::= ELIMINAR EN ruta_archivo condiciones 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("delete",4, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // end_up_list ::= 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("end_up_list",20, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // end_up_list ::= COMA update_list 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("end_up_list",20, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // update_list ::= ID SIG_IGUAL valores end_up_list 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("update_list",19, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // update ::= ACTUALIZAR EN ruta_archivo ASIGNAR update_list condiciones 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-5)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // insert ::= INSERTAR EN ruta_archivo VALORES PARENA lista_valores PARENC 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("insert",2, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-6)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // insert ::= INSERTAR EN ruta_archivo PARENA lista_columnas PARENC VALORES PARENA lista_valores PARENC 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("insert",2, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-9)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // op_select ::= ASTERISCO EN ruta_archivo condiciones 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("op_select",15, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // op_select ::= lista_columnas EN ruta_archivo condiciones 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("op_select",15, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // select ::= SELECCIONAR op_select 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("select",1, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= delete PCOMA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= update PCOMA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= insert PCOMA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruccion ::= select PCOMA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)).value;
		RESULT = start_val;
              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$InstruccionesParser$parser.done_parsing();
          return CUP$InstruccionesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


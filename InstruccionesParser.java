
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 06 01:56:24 CST 2024
//----------------------------------------------------

package com.luisbaquiax.emuladordb.parser;

import com.luisbaquiax.emuladordb.lexer.InstrucionesLexer;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 06 01:56:24 CST 2024
  */
public class InstruccionesParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public InstruccionesParser() {super();}

  /** Constructor which sets the default scanner. */
  public InstruccionesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public InstruccionesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\003\007" +
    "\000\002\007\004\000\002\012\004\000\002\012\002\000" +
    "\002\010\004\000\002\013\004\000\002\013\002\000\002" +
    "\011\006\000\002\011\006\000\002\014\003\000\002\014" +
    "\003\000\002\017\007\000\002\017\007\000\002\020\007" +
    "\000\002\020\007\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\004\005\001\002\000\004\027\072\001" +
    "\002\000\004\015\016\001\002\000\004\002\015\001\002" +
    "\000\004\027\014\001\002\000\004\027\013\001\002\000" +
    "\004\027\012\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002\000\006\011\ufff9\031\067\001\002\000\004" +
    "\011\020\001\002\000\004\015\021\001\002\000\006\015" +
    "\ufff6\030\064\001\002\000\004\015\023\001\002\000\016" +
    "\021\026\022\030\023\032\024\033\025\031\026\025\001" +
    "\002\000\004\027\ufffc\001\002\000\006\017\uffe9\020\uffe9" +
    "\001\002\000\004\014\062\001\002\000\006\017\036\020" +
    "\035\001\002\000\006\017\uffeb\020\uffeb\001\002\000\006" +
    "\017\uffec\020\uffec\001\002\000\006\017\uffed\020\uffed\001" +
    "\002\000\006\017\uffea\020\uffea\001\002\000\006\012\040" +
    "\013\043\001\002\000\006\012\uffe7\013\uffe7\001\002\000" +
    "\006\012\uffe8\013\uffe8\001\002\000\004\027\ufff4\001\002" +
    "\000\004\015\053\001\002\000\004\027\ufff3\001\002\000" +
    "\004\027\ufff2\001\002\000\004\015\044\001\002\000\016" +
    "\021\046\022\030\023\032\024\033\025\031\026\025\001" +
    "\002\000\006\017\036\020\035\001\002\000\004\014\047" +
    "\001\002\000\004\013\043\001\002\000\004\027\uffef\001" +
    "\002\000\004\013\043\001\002\000\004\027\uffee\001\002" +
    "\000\016\021\054\022\030\023\032\024\033\025\031\026" +
    "\025\001\002\000\004\014\060\001\002\000\006\017\036" +
    "\020\035\001\002\000\004\012\040\001\002\000\004\027" +
    "\ufff0\001\002\000\004\012\040\001\002\000\004\027\ufff1" +
    "\001\002\000\006\012\040\013\043\001\002\000\004\027" +
    "\ufff5\001\002\000\004\015\021\001\002\000\004\015\ufff8" +
    "\001\002\000\004\015\ufff7\001\002\000\004\015\016\001" +
    "\002\000\004\011\ufffb\001\002\000\004\011\ufffa\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\014\002\005\003\003\004\006\005\010\006" +
    "\007\001\001\000\002\001\001\000\004\007\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\067\001\001\000" +
    "\002\001\001\000\004\010\021\001\001\000\004\013\064" +
    "\001\001\000\004\011\023\001\001\000\004\016\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\036" +
    "\017\040\020\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\044\001" +
    "\001\000\004\015\050\001\001\000\002\001\001\000\004" +
    "\020\047\001\001\000\002\001\001\000\004\020\051\001" +
    "\001\000\002\001\001\000\004\016\054\001\001\000\002" +
    "\001\001\000\004\015\055\001\001\000\004\017\056\001" +
    "\001\000\002\001\001\000\004\017\060\001\001\000\002" +
    "\001\001\000\010\014\062\017\040\020\041\001\001\000" +
    "\002\001\001\000\004\010\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$InstruccionesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$InstruccionesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$InstruccionesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!
    public InstruccionesParser(InstrucionesLexer lex) {
	    super(lex);
	  }
private Symbol s;
public void syntax_error(Symbol cur_token) {
            this.s = cur_token;
            String cadena = cur_token.value.toString();
            int linea = cur_token.left;
            int col = cur_token.right;
            System.out.print("Error aca > value " + cadena);
            System.out.print(" Linea " + linea);
            System.out.println(" Columna " + col);
            if (expected_token_ids().isEmpty()) {
                System.out.println("ya no se esperaba ningun simbolo");
            }
        }
public Symbol getSim(){
    return this.s;
}

public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$InstruccionesParser$actions {
  private final InstruccionesParser parser;

  /** Constructor */
  CUP$InstruccionesParser$actions(InstruccionesParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$InstruccionesParser$do_action(
    int                        CUP$InstruccionesParser$act_num,
    java_cup.runtime.lr_parser CUP$InstruccionesParser$parser,
    java.util.Stack            CUP$InstruccionesParser$stack,
    int                        CUP$InstruccionesParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$InstruccionesParser$result;

      /* select the action based on the action number */
      switch (CUP$InstruccionesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numero ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // signos ::= SIG_DIFERENTE 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // signos ::= SIG_MENOR_QUE 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // signos ::= SIG_MENOR 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // signos ::= SIG_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // signos ::= SIG_MAYOR 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("signos",12, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // or ::= OR ID signos numero or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("or",14, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // or ::= OR ID SIG_IGUAL CADENA or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("or",14, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // and ::= AND ID signos numero and 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("and",13, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // and ::= AND ID SIG_IGUAL CADENA and 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("and",13, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // and_or ::= or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("and_or",10, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // and_or ::= and 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("and_or",10, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condiciones ::= ID signos numero and_or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // condiciones ::= ID SIG_IGUAL CADENA and_or 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-3)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // next_file ::= 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("next_file",9, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // next_file ::= PUNTO ruta_archivo 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("next_file",9, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ruta_archivo ::= ID next_file 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("ruta_archivo",6, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // value_list ::= 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("value_list",8, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // value_list ::= COMA lista_columnas 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("value_list",8, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_columnas ::= ID value_list 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("lista_columnas",5, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // select ::= SELECCIONAR lista_columnas EN ruta_archivo condiciones 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("select",1, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-4)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= delete PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= update PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= insert PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruccion ::= select PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          return CUP$InstruccionesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)).value;
		RESULT = start_val;
              CUP$InstruccionesParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.elementAt(CUP$InstruccionesParser$top-1)), ((java_cup.runtime.Symbol)CUP$InstruccionesParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$InstruccionesParser$parser.done_parsing();
          return CUP$InstruccionesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

